import spidev
import time


# ADXL345 Registers
POWER_CTL = 0x2D   # Power control register
THRESH_FF = 0x28   # Free-fall threshold register
TIME_FF = 0x29     # Free-fall time register
INT_ENABLE = 0x2E  # Interrupt enable register
INT_MAP = 0x2F     # Interrupt mapping register
INT_SOURCE = 0x30  # Interrupt source register
FREE_FALL_BIT = 0x04  # Bit mask for the FREE_FALL bit in INT_SOURCE

# SPI initialization
spi = spidev.SpiDev()
spi.open(0, 0)               # Open bus 0, device 0 (CS0)
spi.max_speed_hz = 5000      # SPI speed (can be increased if needed)

# Write to the ADXL345 register
def write_register(register, value):
    spi.xfer2([register, value])

# Read from the ADXL345 register
def read_register(register):
    result = spi.xfer2([register | 0x80, 0x00])  # Set MSB to 1 for reading
    return result[1]

# Initialize the ADXL345 for fall detection
def initialize_fall_detection():
    # Set the device to measurement mode
    write_register(POWER_CTL, 0x08)
    
    # Set free-fall threshold (300 mg to 600 mg, e.g., 0x06 -> 375 mg)
    write_register(THRESH_FF, 0x06)
    
    # Set free-fall time (100 ms to 350 ms, e.g., 0x20 -> 160 ms)
    write_register(TIME_FF, 0x20)
    
    # Enable free-fall interrupt
    write_register(INT_ENABLE, FREE_FALL_BIT)
    
    # Map free-fall interrupt to INT1 or INT2 pin (0 maps to INT1, 1 to INT2)
    write_register(INT_MAP, 0x00)  # Map to INT1 pin

# Check for fall detection
def check_fall():
    # Read the INT_SOURCE register to check if free-fall interrupt occurred
    int_source = read_register(INT_SOURCE)
    
    # Check the FREE_FALL bit (bit 2)
    if int_source & FREE_FALL_BIT:
        print("Fall detected!")
        return True
    else:
        return False

# Main loop to monitor for fall events
if __name__ == "__main__":
    initialize_fall_detection()
    
    try:
        while True:
            if check_fall():
                # Trigger any fall-related response here
                print("Responding to fall event...")
            time.sleep(0.1)  # Check every 100ms
    except KeyboardInterrupt:
        spi.close()  # Close the SPI connection when done
